#!/usr/bin/env node

require('dotenv').config()

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('glass-view-2:server');
var http = require('http');
var redis = require("redis");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);
var FLOAT_FACTOR = 1000000;

io.on('connection', function(socket){
    console.log('a user connected')
    // socket.on('chat message', function(msg){
    //     console.log('message: ' + msg);
    //     io.emit('chat message', msg);
    // });
    socket.on('ahrs_cmd', function(msg) {
        console.log("on cmd " + msg);
        if(!serial_port.isOpen)
            return;
        sendByte(msg);
    });

    socket.on('ahrs_cmd_vec', function(msg) {
        console.log("on cmd vec" + msg);
        let body = JSON.parse(msg);
        sendByte(body.code);
        let vec = body.vec;
        let msgData =  "" + parseInt(vec.x*FLOAT_FACTOR)+" "+parseInt(vec.y*FLOAT_FACTOR)+" "+parseInt(vec.z*FLOAT_FACTOR)+" "
        console.log("Write serial ", msgData);
        serial_port.write( msgData );
    });

    socket.on('ahrs_cmd_mtx', function(msg) {
        console.log("on cmd mtx " + msg);
        let body = JSON.parse(msg);
        sendByte(body.code);
        let m = body.matrix.elements;
        for(let i=0;i<3;i++) {
            setTimeout( function() {
                for (let j = 0; j < 3; j++) {
                    let id = i * 4 + j;
                    let msgData = parseInt(m[id]*FLOAT_FACTOR)+" ";
                    console.log("Write serial ", msgData);
                    //serial_port.write( msgData );
                    serial_port.write(msgData);
                }
            }, i*100);
        }
        //serial_port.write("1111");//end
    });


    socket.on('disconnect', function(){
        console.log('user disconnected');
    });
});

function sendByte(byte) {
    let buffer = new Buffer.alloc(1);
    buffer[0] = parseInt(byte);
    serial_port.write(buffer);
}



//////// redis connection ///////////////


redis_client = redis.createClient({
    host: "value_host",
    port: 6379,
});

redis_client.on("error", function (err) {
    console.log("Error " + err);
});
function sendValue( name , value, time =3)
{
    let key_name = "volatile:" + name + ":value";
    if (time > 0)
        redis_client.set(key_name, value, 'EX', time);
    else
        redis_client.set(key_name, value);
}

function sendSensorData(sensor_data) {
    sendValue("ahrs:roll", sensor_data.m_angles.x);
    sendValue("ahrs:pitch", sensor_data.m_angles.y);
    sendValue("ahrs:yaw", sensor_data.m_angles.z);
    sendValue("ahrs:acc:roll", sensor_data.m_filter_err.x / 15 );
    sendValue("ahrs:g", sensor_data.m_g / 9.8);
    sendValue("ahrs:acc:x", sensor_data.m_acc.x );
    sendValue("ahrs:acc:y", sensor_data.m_acc.y );
    sendValue("ahrs:acc:z", sensor_data.m_acc.z );
}


/////// SERIAL  PORT //////////
const SerialPort = require('serialport');
const Readline = SerialPort.parsers.Readline;
const SERIAL_PORT = process.env.SERIAL_PORT || '/dev/ttyUSB0'
const serial_port = new SerialPort('/dev/ttyUSB0', {
    baudRate: 115200,
    autoOpen: false,
}, false);


function openSerial () {
    serial_port.open( function(err) {
        if (!err) {
            console.log('Port open');
            const E_CMD_CODE_CALIBRATE_GYRO = 20;
            setTimeout( function () {
                sendByte( E_CMD_CODE_CALIBRATE_GYRO);
                }, 3000);
            return;
        }

        console.log('Port is not open: ' + err.message);
        setTimeout(openSerial, 10000); // next attempt to open after 10s
    });
}


serial_port.on('error', function(err) {
    console.log(err);
});
serial_port.on('close', function () {
    console.log('CLOSE');
    io.emit('ahrs', null);
    openSerial(); // reopen
});

function startEmulation() {
    var emul_time = 0;
    setInterval(() => {
        emul_time += 0.03;
        sensor_data.doEmulation(emul_time);
        let json_msg = JSON.stringify( sensor_data );
        io.emit('ahrs', json_msg);
    }, 30);
}

//startEmulation();

const parser = new Readline();
serial_port.pipe(parser);
parser.on('data', (msg) => {
    if(sensor_data.onDataMessage(msg))  {
        let json_msg = JSON.stringify( sensor_data );
        //console.log(json_msg);
        io.emit('ahrs', json_msg);
        sendSensorData(sensor_data);
    } else {
        io.emit('ahrs_msg', msg);
    }



});



openSerial();

//port.write('ROBOT PLEASE RESPOND\n');


/////// PARSER //////////

const SensorData = require('../sensor/sensor_data');
var sensor_data = new SensorData();

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
