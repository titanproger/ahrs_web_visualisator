#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('glass-view-2:server');
var http = require('http');
var redis = require("redis");



/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);
var FLOAT_FACTOR = 1000000;

io.on('connection', function(socket){
    console.log('a user connected')
    // socket.on('chat message', function(msg){
    //     console.log('message: ' + msg);
    //     io.emit('chat message', msg);
    // });

    socket.on('disconnect', function(){
        console.log('user disconnected');
    });
});

//////// redis connection ///////////////

redis_client = redis.createClient({
    host: "value_host",
    port: 6379,
});

redis_client.on("error", function (err) {
    console.log("Error " + err);
});


var value_names = require('./values.json');


var m_emulation_enabled = false;
var emul_time = 0;

function _update( finish_callback ) {


    if(!m_emulation_enabled)
        return finish_callback();

    m_emulation_enabled = false;
    let count_process = value_names.length;

    value_names.forEach(function(record) {

        let code = record[0];
        let path = record[2];

        redis_client.get("volatile:" + path + ":value", function (err, result) {
            if(!err) {

                let k = emul_time * Math.PI  * 2;
                result = Math.sin( k / 20 ) * 25;

                //console.log("result " +code +"=" + result + "\n");
                let message = {
                    "code":code,
                    "value":result
                };
                io.emit('value', message);
            }
            else
                console.log("fail " + path + "\n");

            count_process--;
            if(count_process <=0 )
                finish_callback();
        });
    });
}


function startSending() {
    m_emulation_enabled = true;
    setInterval(_update, 100, () => {
        //console.log("tick");
        emul_time += 0.1;
        m_emulation_enabled = true;
    });
}

startSending();




/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
